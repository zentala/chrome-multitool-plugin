/**
 * YouTube Module Component
 * Integrates YouTube transcription and AI features into the main extension
 */

// Purpose: This component provides the YouTube transcription functionality
// integrated into the main extension's modular popup system

import React, { useState, useEffect } from 'react';
import { YouTubeCaptionData } from '../../interfaces/YouTubeCaptionData';
import { AISettings } from '../../interfaces/YouTubeCaptionData';
import { youtubeTranscriptionService } from '../../services/youtube/youtube.service';
import { transcriptionService } from '../../services/youtube/transcription.service';
import { aiServiceManager } from '../../services/ai.service';
import { settingsService } from '../../services/settings.service';

/**
 * YouTube Module for the extension popup
 */
const YouTubeModule: React.FC = () => {
  const [videoUrl, setVideoUrl] = useState('');
  const [captions, setCaptions] = useState<YouTubeCaptionData[]>([]);
  const [selectedCaption, setSelectedCaption] = useState<YouTubeCaptionData | null>(null);
  const [processing, setProcessing] = useState(false);
  const [aiResponse, setAiResponse] = useState('');
  const [aiSettings, setAiSettings] = useState<AISettings>({
    provider: 'gemini',
    apiKey: '',
    model: 'gemini-pro',
    temperature: 0.7
  });

  // Load AI settings on component mount
  useEffect(() => {
    const loadSettings = async () => {
      const settings = await settingsService.getAISettings();
      setAiSettings(settings);
      aiServiceManager.configure(settings);
    };
    loadSettings();
  }, []);

  // Extract video ID from URL input
  const handleUrlChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const url = e.target.value;
    setVideoUrl(url);

    const videoId = youtubeTranscriptionService.extractVideoId(url);
    if (videoId) {
      // TODO: Load available captions for the video
      setCaptions([]);
      setSelectedCaption(null);
    }
  };

  // Handle caption download
  const handleDownloadCaption = async () => {
    if (!selectedCaption) return;

    try {
      setProcessing(true);
      const captionText = await youtubeTranscriptionService.downloadCaptions(
        selectedCaption.videoId,
        selectedCaption.language
      );

      // Create and trigger download
      const blob = new Blob([captionText], { type: 'text/vtt' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `captions_${selectedCaption.videoId}.vtt`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    } catch (error) {
      console.error('Error downloading captions:', error);
      alert('Error downloading captions. Please try again.');
    } finally {
      setProcessing(false);
    }
  };

  // Handle AI processing
  const handleAIProcess = async () => {
    if (!selectedCaption || !aiSettings.apiKey) {
      alert('Please select a caption and configure your AI API key in settings.');
      return;
    }

    try {
      setProcessing(true);
      const captionText = await youtubeTranscriptionService.downloadCaptions(
        selectedCaption.videoId,
        selectedCaption.language
      );

      // Process with AI
      const response = await transcriptionService.processTranscription(
        captionText,
        aiSettings,
        'Please analyze and summarize this video transcript.'
      );

      setAiResponse(response);
    } catch (error) {
      console.error('Error processing with AI:', error);
      alert('Error processing with AI. Please check your settings and try again.');
    } finally {
      setProcessing(false);
    }
  };

  return (
    <div className="youtube-module">
      <h3>YouTube Transcription</h3>

      <div className="input-group">
        <label htmlFor="video-url">YouTube Video URL:</label>
        <input
          id="video-url"
          type="text"
          value={videoUrl}
          onChange={handleUrlChange}
          placeholder="https://www.youtube.com/watch?v=..."
        />
      </div>

      {captions.length > 0 && (
        <div className="captions-list">
          <h4>Available Captions:</h4>
          {captions.map((caption) => (
            <div key={`${caption.videoId}-${caption.language}`} className="caption-item">
              <input
                type="radio"
                id={`caption-${caption.language}`}
                name="caption"
                checked={selectedCaption?.language === caption.language}
                onChange={() => setSelectedCaption(caption)}
              />
              <label htmlFor={`caption-${caption.language}`}>
                {caption.language} {caption.autoGenerated && '(Auto-generated)'}
              </label>
            </div>
          ))}
        </div>
      )}

      {selectedCaption && (
        <div className="caption-actions">
          <button
            onClick={handleDownloadCaption}
            disabled={processing}
            className="download-btn"
          >
            {processing ? 'Downloading...' : 'Download Captions'}
          </button>

          <button
            onClick={handleAIProcess}
            disabled={processing || !aiSettings.apiKey}
            className="ai-process-btn"
          >
            {processing ? 'Processing...' : 'Process with AI'}
          </button>
        </div>
      )}

      {aiResponse && (
        <div className="ai-response">
          <h4>AI Analysis:</h4>
          <textarea
            value={aiResponse}
            readOnly
            rows={8}
          />
        </div>
      )}
    </div>
  );
};

export default YouTubeModule;
