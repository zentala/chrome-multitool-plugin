---
description: 
globs: 
alwaysApply: true
---
# Always

## General

- **Work in YOLO mode:**  
  Trust your judgment. I have aligned with you on this — **DO NOT ask for permission**.  
  If unsure, follow tasks from `TODO.md`.

- **Context awareness:**  
  Always refer to `./.cursor/CURSOR.md` for project overview and context.  
  Update it when significant decisions are made.

- **Task tracking:**  
  - Maintain and follow `./.cursor/TODO.md`.
  - Create subtodo files: `./.cursor/TODO_<name>.md` for subprojects and link them in the main TODO.
  - Use `[ ]` for open tasks and `[x]` for completed ones.
  - Refactor old TODOs to this checkbox format.
  - Update TODOs immediately after completing changes.

- **Metadata and documentation:**  
  - Each important folder must have a `.meta.md` file describing its purpose and structure.
  - Maintain a `.cursor/WHY.md` explaining key architectural decisions.
  - Log major decisions in `.cursor/DECISIONS_<date>.md`.
  - Log all failed technical experiments in `.cursor/failedexperiments/`.
  - Maintain a `.cursor/ERRORS.md` for known issues and solutions.
  - Document typical mistakes in `.cursor/CODE_SMELLS.md`.
  - Maintain a weekly developer mood log in `.cursor/DEV_MOOD_TRACKER.md`.
  - Capture project values and philosophy in `.cursor/PHILOSOPHY.md`.
  - Collect programming wisdom and reminders in `.cursor/RANDOM_WISDOM.md`.
  - For important modules, create `.usage.md` files explaining usage examples.
  - Create lightweight diagrams for complex logic in `.cursor/DIAGRAMS/`.
  - stworzyony plik z szalbonem musisz jeszcze uzupelnic recznie

## Commits

- Commit **after every completed task**.
- Lint and test code before committing.
  - `pnpm run test >> test.log`
  - `pnpm run lint >> lint.log`
  - then fix them all, then commit
- Use **Conventional Commits** format.
- Always `git status` before commit and **try to commit all relevant changes** together.
- sometimes ammend commit if it makes more sense

## Terminal

- Use **PowerShell 7** (`pwsh`) on **Windows 11**.
- Use **pnpm** as the package manager.
- Log any terminal problems into `./.cursor/PWSH_ISSUES.md`, providing:
  - Problem description
  - Workarounds that work
  - Best practices you recommend
- Prefer **non-interactive mode** for commands when possible.
- Never use ` | cat` becasuse not works!

## Code and Documentation Style

- Write **junior-friendly code and documentation**:
  - Use **TSDoc comments** on exported functions, classes, complex logic.
  - Add **TODO** and **FIXME** in code to mark future improvements or known issues.
  - If file is longer than 200 lines split it into smaler files
  - on top of every ts/tsx file comment what is purpose of this file in the app context
  - If fixing a problem:
    - Document **which approaches were tried and failed**.
    - Optionally create a `.md` notes file next to the code (`<filename>.{ts,tsx,css,sh,etc..}.md`).

- Maintain folder cleanliness:
  - After major changes, **remove or archive outdated files**.
  - Update related `.meta.md` and `TODO.md` if structure or plans change.


## Testing

- Tests don't have to cover everything initially.
- If skipping a hard-to-test part:
  - Leave a **comment** explaining what was skipped and why.
  - Add `TODO` or `FIXME` for future improvement.
- Prioritize testing core logic over minor UI behaviors unless critical.

## Cursor and Tools Behavior

- If you experience editing issues with tools (file won't update few times):
  - Pause work immediately and **ask the user to restart Cursor**.
  - After restart, continue work.

# ✨ Notes for Better Context Maintenance

- Regularly refresh all files under `.cursor/`.
- Enforce Stale Checks to ensure documentation, diagrams, and TODOs are up-to-date.
- Prefer lightweight but accurate diagrams (`.puml` or simple `.md`) for non-trivial flows.
- Document what didn't work, not only what did — build context over time.

## Generowanie dokumentacji

Używaj zawsze gotowych skryptów:

### Foldery i moduły:

- `.meta.md`:

```pwsh
.\.cursor\scripts\gen-meta.ps1 "src/components"
```

- `.usage.md`:

```pwsh
.\.cursor\scripts\gen-usage.ps1 "src/hooks/useFetch.ts"
```

### Pliki dokumentacyjne w `.cursor/`:

Zamiast skryptów PowerShell, używaj narzędzia `mcp_context_create_from_template` do tworzenia nowych wpisów w odpowiednich typach kontekstu (np. `decisions`, `mood`, `errors`, `failedexperiments`).

Przykład:

- Nowa decyzja (używa szablonu `decision.md` w typie `decisions`):
  Wywołaj `mcp_context_create_from_template` z parametrami:
  - `templateName`: "decision"
  - `type`: "decisions"
  - `filename`: "use-react-query" (opcjonalnie, utworzony z tytułu)
  - `variables`: `{ "title": "use-react-query" }` (opcjonalnie, jeśli szablon wymaga)

- Nowy wpis mood (używa szablonu `mood.md` w typie `mood`):
  Wywołaj `mcp_context_create_from_template` z parametrami:
  - `templateName`: "mood"
  - `type`: "mood"
  - `filename`: "week-17-2025"
  - `variables`: `{ "title": "week-17-2025" }`

- Nowy błąd (używa szablonu `error.md` w typie `errors`):
  Wywołaj `mcp_context_create_from_template` z parametrami:
  - `templateName`: "error"
  - `type`: "errors"
  - `filename`: "auth-token-expiry-bug"
  - `variables`: `{ "title": "auth-token-expiry-bug" }`

- Nowy nieudany eksperyment (używa szablonu `failed-experiment.md` w typie `failedexperiments`):
  Wywołaj `mcp_context_create_from_template` z parametrami:
  - `templateName`: "failed-experiment"
  - `type`: "failedexperiments"
  - `filename`: "replace-redux-with-zustand"
  - `variables`: `{ "title": "replace-redux-with-zustand" }`

Szablony znajdują się w `.cursor/context/_templates/`.

## Playwright E2E tests

- nigdy nie uruchamiaj headed, zawesze headles
- zawsze gemerik raport aby nie otwirac wiszaego serwera: `npx playwright test --reporter=html,line`

```
# Normalne testy (headless, bez otwierania przeglądarki)
npm run test:e2e

# Jeśli potrzebujesz debugować z widoczną przeglądarką
npm run test:e2e:headed

# Obejrzeć wyniki później
npm run test:e2e:report
```

nie pokazuj mi raportu, nie odpala show-report, sam sobie zobacz pliki json z reporem czy jakies inne i dzialaj na ich podsatawie


## ADR

documentacja ADR:

`./ADR/NNN-short-description.md`

where NNN is number of the ADR

eg `./ADR/001-use-MV2.md`

For now:

* `ADR/001-manifest-v2-over-v3.md` - Dlaczego MV2 zamiast MV3
* `ADR/002-always-headless-false-for-extension-testing.md` - Dlaczego zawsze `headless: false`
